package ru.kwanza.dbtool.orm.impl.mapping;

import ru.kwanza.dbtool.orm.api.internal.IEntity;
import ru.kwanza.dbtool.orm.api.internal.IFieldMapping;
import ru.kwanza.dbtool.orm.api.internal.IRelationMapping;
import ru.kwanza.toolbox.fieldhelper.Property;

import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

/**
 * @author Alexander Guzanov
 */
public class SubUnionEntity implements IEntity {
    private IEntity entity;

    private Map<String, IFieldMapping> fields = new HashMap<String, IFieldMapping>();

    public SubUnionEntity(IEntity entity, UnionEntity unionEntity) {
        this.entity = entity;
        final Collection<IFieldMapping> fields1 = entity.getFields();
        for (IFieldMapping fieldMapping : fields1) {
            final IFieldMapping commonField = unionEntity.getField(fieldMapping.getName());
            if (commonField != null) {
                fields.put(commonField.getName(), commonField);
            } else {
                fields.put(fieldMapping.getName(), new SubEntityFieldMapping(unionEntity.getNextAlias(), fieldMapping));
            }
        }

    }

    public IEntity getEntity() {
        return entity;
    }

    public String getTableName() {
        return entity.getTableName();
    }

    public String getSql() {
        return entity.getSql();
    }

    public void validate() {
        entity.validate();
    }

    public Class getEntityClass() {
        return entity.getEntityClass();
    }

    public boolean isAbstract() {
        return entity.isAbstract();
    }

    public IFieldMapping getIdField() {
        return entity.getIdField();
    }

    public IFieldMapping getVersionField() {
        return entity.getVersionField();
    }

    public IFieldMapping getField(String name) {
        return fields.get(name);
    }

    public Collection<IFieldMapping> getFields() {
        return Collections.unmodifiableCollection(fields.values());
    }

    public IRelationMapping getRelation(String name) {
        return entity.getRelation(name);
    }

    public Collection<IRelationMapping> getRelations() {
        return entity.getRelations();
    }

    public static class SubEntityFieldMapping implements IFieldMapping {
        private IFieldMapping deletate;
        private String columnName;

        public SubEntityFieldMapping(String columnName, IFieldMapping deletate) {
            this.columnName = columnName;
            this.deletate = deletate;
        }

        public String getColumn() {
            return columnName;
        }

        public int getType() {
            return deletate.getType();
        }

        public String getName() {
            return deletate.getName();
        }

        public boolean isAutoGenerated() {
            return deletate.isAutoGenerated();
        }

        public Property getProperty() {
            return deletate.getProperty();
        }
    }
}
